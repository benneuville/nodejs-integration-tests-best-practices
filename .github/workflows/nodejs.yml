# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV
        id: nvm

      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NVMRC }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-feature-${{ hashFiles('package-lock.json') }}
            npm-feature-
            npm-

      - name: Docker compose setup
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - run: npm ci

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: .

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-command: 
          - npm run test
          - npm run test:nestjs
          - npm run test:mocha
    steps:
      - uses: actions/checkout@v2
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NVMRC }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-feature-${{ hashFiles('package-lock.json') }}
            npm-feature-
            npm-

      - name: Docker compose setup
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - run: npm ci
      - run: ${{ matrix.test-command }}

  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      source-code: ${{ steps.filter.outputs.src }}
      test: ${{ steps.filter.outputs.test }}
      libraries: ${{ steps.filter.outputs.libraries }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            source-code:
              - 'example-application/business-logic/**'
              - 'example-application/data-access/**'
              - 'example-application/entry-points/**'
              - 'recipes/**'
            libraries:
              - 'example-application/librairies/**'
            test:
              - 'example-application/test/**'
              - 'recipes/**'
